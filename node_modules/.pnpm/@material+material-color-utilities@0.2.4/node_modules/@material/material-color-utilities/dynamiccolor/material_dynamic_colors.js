/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { DynamicColor } from './dynamic_color.js';
import { ToneDeltaConstraint } from './tone_delta_constraint.js';
/**
 * DynamicColors for the colors in the Material Design system.
 */
// Material Color Utilities namespaces the various utilities it provides.
// tslint:disable-next-line:class-as-namespace
export class MaterialDynamicColors {
    static highestSurface(s) {
        return s.isDark ? MaterialDynamicColors.surfaceLight :
            MaterialDynamicColors.surfaceDark;
    }
}
MaterialDynamicColors.contentAccentToneDelta = 15.0;
MaterialDynamicColors.background = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 6 : 98,
});
MaterialDynamicColors.onBackground = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 90 : 10,
    background: (s) => MaterialDynamicColors.background,
});
MaterialDynamicColors.surface = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 6 : 98,
});
MaterialDynamicColors.surfaceDark = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 6 : 87,
});
MaterialDynamicColors.surfaceLight = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 24 : 98,
});
MaterialDynamicColors.surfaceSub2 = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 4 : 100,
});
MaterialDynamicColors.surfaceSub1 = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 10 : 96,
});
MaterialDynamicColors.surfaceContainer = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 12 : 94,
});
MaterialDynamicColors.surfaceAdd1 = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 17 : 92,
});
MaterialDynamicColors.surfaceAdd2 = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 22 : 90,
});
MaterialDynamicColors.onSurface = DynamicColor.fromPalette({
    palette: (s) => s.neutralPalette,
    tone: (s) => s.isDark ? 90 : 10,
    background: (s) => MaterialDynamicColors.highestSurface(s),
});
MaterialDynamicColors.surfaceVariant = DynamicColor.fromPalette({
    palette: (s) => s.neutralVariantPalette,
    tone: (s) => s.isDark ? 30 : 90,
});
MaterialDynamicColors.onSurfaceVariant = DynamicColor.fromPalette({
    palette: (s) => s.neutralVariantPalette,
    tone: (s) => s.isDark ? 80 : 30,
    background: (s) => MaterialDynamicColors.surfaceVariant,
});
MaterialDynamicColors.outline = DynamicColor.fromPalette({
    palette: (s) => s.neutralVariantPalette,
    tone: (s) => 50,
    background: (s) => MaterialDynamicColors.highestSurface(s),
});
MaterialDynamicColors.primary = DynamicColor.fromPalette({
    palette: (s) => s.primaryPalette,
    tone: (s) => s.isDark ? 80 : 40,
    background: (s) => MaterialDynamicColors.highestSurface(s),
    toneDeltaConstraint: (s) => new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.primaryContainer, s.isDark ? 'darker' : 'lighter'),
});
MaterialDynamicColors.onPrimary = DynamicColor.fromPalette({
    palette: (s) => s.primaryPalette,
    tone: (s) => s.isDark ? 20 : 100,
    background: (s) => MaterialDynamicColors.primary,
});
MaterialDynamicColors.primaryContainer = DynamicColor.fromPalette({
    palette: (s) => s.primaryPalette,
    tone: (s) => s.isDark ? 30 : 90,
    background: (s) => MaterialDynamicColors.highestSurface(s),
});
MaterialDynamicColors.onPrimaryContainer = DynamicColor.fromPalette({
    palette: (s) => s.primaryPalette,
    tone: (s) => s.isDark ? 90 : 10,
    background: (s) => MaterialDynamicColors.primaryContainer,
});
MaterialDynamicColors.secondary = DynamicColor.fromPalette({
    palette: (s) => s.secondaryPalette,
    tone: (s) => s.isDark ? 80 : 40,
    background: (s) => MaterialDynamicColors.highestSurface(s),
    toneDeltaConstraint: (s) => new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.secondaryContainer, s.isDark ? 'darker' : 'lighter'),
});
MaterialDynamicColors.onSecondary = DynamicColor.fromPalette({
    palette: (s) => s.secondaryPalette,
    tone: (s) => s.isDark ? 20 : 100,
    background: (s) => MaterialDynamicColors.secondary,
});
MaterialDynamicColors.secondaryContainer = DynamicColor.fromPalette({
    palette: (s) => s.secondaryPalette,
    tone: (s) => s.isDark ? 30 : 90,
    background: (s) => MaterialDynamicColors.highestSurface(s),
});
MaterialDynamicColors.onSecondaryContainer = DynamicColor.fromPalette({
    palette: (s) => s.secondaryPalette,
    tone: (s) => s.isDark ? 90 : 10,
    background: (s) => MaterialDynamicColors.secondaryContainer,
});
MaterialDynamicColors.tertiary = DynamicColor.fromPalette({
    palette: (s) => s.tertiaryPalette,
    tone: (s) => s.isDark ? 80 : 40,
    background: (s) => MaterialDynamicColors.highestSurface(s),
    toneDeltaConstraint: (s) => new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.tertiaryContainer, s.isDark ? 'darker' : 'lighter'),
});
MaterialDynamicColors.onTertiary = DynamicColor.fromPalette({
    palette: (s) => s.tertiaryPalette,
    tone: (s) => s.isDark ? 20 : 100,
    background: (s) => MaterialDynamicColors.tertiary,
});
MaterialDynamicColors.tertiaryContainer = DynamicColor.fromPalette({
    palette: (s) => s.tertiaryPalette,
    tone: (s) => s.isDark ? 30 : 90,
    background: (s) => MaterialDynamicColors.highestSurface(s),
});
MaterialDynamicColors.onTertiaryContainer = DynamicColor.fromPalette({
    palette: (s) => s.tertiaryPalette,
    tone: (s) => s.isDark ? 90 : 10,
    background: (s) => MaterialDynamicColors.tertiaryContainer,
});
MaterialDynamicColors.error = DynamicColor.fromPalette({
    palette: (s) => s.errorPalette,
    tone: (s) => s.isDark ? 80 : 40,
    background: (s) => MaterialDynamicColors.highestSurface(s),
    toneDeltaConstraint: (s) => new ToneDeltaConstraint(MaterialDynamicColors.contentAccentToneDelta, MaterialDynamicColors.errorContainer, s.isDark ? 'darker' : 'lighter'),
});
MaterialDynamicColors.onError = DynamicColor.fromPalette({
    palette: (s) => s.errorPalette,
    tone: (s) => s.isDark ? 20 : 100,
    background: (s) => MaterialDynamicColors.error,
});
MaterialDynamicColors.errorContainer = DynamicColor.fromPalette({
    palette: (s) => s.errorPalette,
    tone: (s) => s.isDark ? 30 : 90,
    background: (s) => MaterialDynamicColors.highestSurface(s),
});
MaterialDynamicColors.onErrorContainer = DynamicColor.fromPalette({
    palette: (s) => s.errorPalette,
    tone: (s) => s.isDark ? 90 : 10,
    background: (s) => MaterialDynamicColors.errorContainer,
});
//# sourceMappingURL=material_dynamic_colors.js.map