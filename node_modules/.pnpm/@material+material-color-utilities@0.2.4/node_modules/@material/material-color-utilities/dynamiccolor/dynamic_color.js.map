{"version":3,"file":"dynamic_color.js","sourceRoot":"","sources":["dynamic_color.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {Contrast} from '../contrast/contrast.js';\nimport {Hct} from '../hct/hct.js';\nimport {TonalPalette} from '../palettes/tonal_palette.js';\nimport {DynamicScheme} from '../scheme/dynamic_scheme.js';\nimport * as math from '../utils/math_utils.js';\n\nimport {ToneDeltaConstraint} from './tone_delta_constraint.js';\n\n/**\n * @param palette Function that provides a TonalPalette given\n * DynamicScheme. A TonalPalette is defined by a hue and chroma, so this\n * replaces the need to specify hue/chroma. By providing a tonal palette, when\n * contrast adjustments are made, intended chroma can be preserved.\n * @param tone Function that provides a tone given DynamicScheme. (useful\n * for dark vs. light mode)\n */\ninterface FromPaletteOptions extends BaseOptions {\n  palette: (scheme: DynamicScheme) => TonalPalette;\n  tone: (scheme: DynamicScheme) => number;\n}\n\n/**\n * @param hue Function with DynamicScheme input and HCT hue output.\n * @param chroma Function with DynamicScheme input and HCT chroma output.\n * @param tone Function with DynamicScheme input and HCT tone output.\n */\ninterface FromHueAndChromaOptions extends BaseOptions {\n  hue: (scheme: DynamicScheme) => number;\n  chroma: (scheme: DynamicScheme) => number;\n  tone: (scheme: DynamicScheme) => number;\n}\n\n/**\n * @param argb Function with DynamicScheme input and ARGB/hex code output.\n * @param [tone=null] Function with DynamicScheme input and HCT tone output. If\n * provided, overrides tone of argb parameter.\n */\ninterface FromArgbOptions extends BaseOptions {\n  argb: (scheme: DynamicScheme) => number;\n  tone?: (scheme: DynamicScheme) => number;\n}\n\n/**\n * @param tone The tone standard.\n * @param scheme The scheme in which to adjust the tone.\n */\ninterface ToneContrastOptions extends BaseOptions {\n  tone: (scheme: DynamicScheme) => number;\n  scheme: DynamicScheme;\n}\n\n/**\n * @param [background=null] Function that provides background\n * DynamicColor given DynamicScheme. Useful for contrast, given a background,\n * colors can adjust to increase/decrease contrast.\n * @param [toneDeltaConstraint=null] Function that provides a\n * ToneDeltaConstraint given DynamicScheme. Useful for ensuring lightness\n * difference between colors that don't require contrast or have a formal\n * background/foreground relationship.\n */\ninterface BaseOptions {\n  background?: (scheme: DynamicScheme) => DynamicColor;\n  toneDeltaConstraint?: (scheme: DynamicScheme) => ToneDeltaConstraint;\n}\n\n/**\n * @param scheme Defines the conditions of the user interface, for example,\n * whether or not it is dark mode or light mode, and what the desired\n * contrast level is.\n * @param toneStandard Function with input of DynamicScheme that outputs the\n * tone to be used at default contrast.\n * @param toneToJudge Function with input of DynamicColor that outputs tone the\n * color is in the current UI state. Used to determine the tone of the\n * background.\n * @param desiredTone Function with inputs of contrast ratio with background at\n * default contrast and the background tone at current contrast level. Outputs\n * tone.\n * @param [background] Optional, function with input of DynamicScheme that\n * returns a DynamicColor that is the background of the color whose tone is\n * being calculated.\n * @param [constraint] Optional, function with input of DynamicScheme that\n * returns a ToneDeltaConstraint. If provided, the ToneDeltaConstraint is\n * enforced.\n * @param [minRatio] Optional, function with input of DynamicScheme that returns\n * the minimum contrast ratio between background and the color whose tone is\n * being calculated.\n * @param [maxRatio] Optional, function with input of DynamicScheme that returns\n * the maximum contrast ratio between background and the color whose tone is\n * being calculated.\n */\ninterface CalculateDynamicToneOptions {\n  scheme: DynamicScheme;\n  toneStandard: (scheme: DynamicScheme) => number;\n  toneToJudge: (dynamicColor: DynamicColor) => number;\n  desiredTone: (standardRatio: number, bgTone: number) => number;\n  background?: (scheme: DynamicScheme) => DynamicColor;\n  toneDeltaConstraint?: (scheme: DynamicScheme) => ToneDeltaConstraint;\n  minRatio?: (scheme: number) => number;\n  maxRatio?: (scheme: number) => number;\n}\n\n/**\n * A color that adjusts itself based on UI state provided by DynamicScheme.\n *\n * Colors without backgrounds do not change tone when contrast changes. Colors\n * with backgrounds become closer to their background as contrast lowers, and\n * further when contrast increases.\n *\n * Prefer static constructors. They require either a hexcode, a palette and\n * tone, or a hue and chroma. Optionally, they can provide a background\n * DynamicColor.\n */\nexport class DynamicColor {\n  private readonly hctCache = new Map<DynamicScheme, Hct>();\n\n  /**\n   * Create a DynamicColor defined by a TonalPalette and HCT tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide a palette\n   * and tone. May provide a background DynamicColor and ToneDeltaConstraint.\n   */\n  static fromPalette(args: FromPaletteOptions): DynamicColor {\n    return new DynamicColor(\n        (scheme) => args.palette(scheme).hue,\n        (scheme) => args.palette(scheme).chroma, args.tone,\n        (scheme) => DynamicColor.toneMinContrastDefault({\n          tone: args.tone,\n          scheme,\n          background: args.background,\n          toneDeltaConstraint: args.toneDeltaConstraint,\n        }),\n        (scheme) => DynamicColor.toneMaxContrastDefault({\n          tone: args.tone,\n          scheme,\n          background: args.background,\n          toneDeltaConstraint: args.toneDeltaConstraint,\n        }),\n        args.background, args.toneDeltaConstraint);\n  }\n\n  /**\n   * Create a DynamicColor defined by a HCT hue, chroma, and tone.\n   *\n   * @param args Functions with DynamicScheme as input. Must provide hue,\n   * chroma, and tone. May provide background DynamicColor and\n   * ToneDeltaConstraint.\n   */\n  static fromHueAndChroma(args: FromHueAndChromaOptions): DynamicColor {\n    return new DynamicColor(\n        args.hue, args.chroma, args.tone,\n        (scheme) => DynamicColor.toneMinContrastDefault({\n          tone: args.tone,\n          scheme,\n          background: args.background,\n          toneDeltaConstraint: args.toneDeltaConstraint,\n        }),\n        (scheme) => DynamicColor.toneMaxContrastDefault({\n          tone: args.tone,\n          scheme,\n          background: args.background,\n          toneDeltaConstraint: args.toneDeltaConstraint,\n        }),\n        args.background, args.toneDeltaConstraint);\n  }\n\n  /**\n   * Create a DynamicColor from a ARGB color (hex code).\n   *\n   * @param args Functions with DynamicScheme as input. Must provide ARGB (hex\n   * code). May provide tone that overrides hex code's, background DynamicColor,\n   * and ToneDeltaConstraint.\n   */\n  static fromArgb(args: FromArgbOptions): DynamicColor {\n    return new DynamicColor(\n        (scheme) => {\n          const hct = Hct.fromInt(args.argb(scheme));\n          return hct.hue;\n        },\n        (scheme) => {\n          const hct = Hct.fromInt(args.argb(scheme));\n          return hct.chroma;\n        },\n        (scheme) => {\n          return args.tone?.(scheme) ?? Hct.fromInt(args.argb(scheme)).tone;\n        },\n        (scheme) => {\n          return DynamicColor.toneMinContrastDefault({\n            tone: (scheme) =>\n                args.tone?.(scheme) ?? Hct.fromInt(args.argb(scheme)).tone,\n            scheme,\n            background: args.background,\n            toneDeltaConstraint: args.toneDeltaConstraint,\n          });\n        },\n        (scheme) => {\n          return DynamicColor.toneMaxContrastDefault({\n            tone: (scheme) =>\n                args.tone?.(scheme) ?? Hct.fromInt(args.argb(scheme)).tone,\n            scheme,\n            background: args.background,\n            toneDeltaConstraint: args.toneDeltaConstraint,\n          });\n        },\n        args.background, args.toneDeltaConstraint);\n  }\n\n  /**\n   * The base constructor for DynamicColor.\n   *\n   * _Strongly_ prefer using one of the convenience constructors. This class is\n   * arguably too flexible to ensure it can support any scenario. Functional\n   * arguments allow  overriding without risks that come with subclasses.\n   *\n   * For example, the default behavior of adjust tone at max contrast\n   * to be at a 7.0 ratio with its background is principled and\n   * matches accessibility guidance. That does not mean it's the desired\n   * approach for _every_ design system, and every color pairing,\n   * always, in every case.\n   *\n   * @param hue given DynamicScheme, return the hue in HCT of the output\n   * color.\n   * @param chroma given DynamicScheme, return chroma in HCT of the output\n   * color.\n   * @param tone given DynamicScheme, return tone in HCT of the output color.\n   * This tone is used for standard contrast.\n   * @param toneMinContrast given DynamicScheme, return tone in HCT this color\n   * should be at minimum contrast. See toneMinContrastDefault for the default\n   * behavior, and strongly consider using it unless you have strong opinions\n   * on color and accessibility. The convenience constructors use it.\n   * @param toneMaxContrast given DynamicScheme, return tone in HCT this color\n   * should be at maximum contrast. See toneMaxContrastDefault for the default\n   * behavior, and strongly consider using it unless you have strong opinions\n   * on color and accessibility. The convenience constructors use it.\n   * @param background given DynamicScheme, return the DynamicColor that is\n   * the background of this DynamicColor. When this is provided,\n   * automated adjustments to lower and raise contrast are made.\n   * @param toneDeltaConstraint given DynamicScheme, return a\n   * ToneDeltaConstraint that describes a requirement that this\n   * DynamicColor must always have some difference in tone from another\n   * DynamicColor.\n   *\n   * Unlikely to be useful unless a design system has some distortions\n   * where colors that don't have a background/foreground relationship\n   * don't want to have a formal relationship or a principled value for their\n   * tone distance based on common contrast / tone delta values, yet, want\n   * tone distance.\n   */\n  constructor(\n      readonly hue: (scheme: DynamicScheme) => number,\n      readonly chroma: (scheme: DynamicScheme) => number,\n      readonly tone: (scheme: DynamicScheme) => number,\n      readonly toneMinContrast: (scheme: DynamicScheme) => number,\n      readonly toneMaxContrast: (scheme: DynamicScheme) => number,\n      readonly background?: (scheme: DynamicScheme) => DynamicColor,\n      readonly toneDeltaConstraint?:\n          (scheme: DynamicScheme) => ToneDeltaConstraint) {}\n\n  /**\n   * Return a ARGB integer (i.e. a hex code).\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getArgb(scheme: DynamicScheme): number {\n    return this.getHct(scheme).toInt();\n  }\n\n  /**\n   * Return a color, expressed in the HCT color space, that this\n   * DynamicColor is under the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getHct(scheme: DynamicScheme): Hct {\n    const cachedAnswer = this.hctCache.get(scheme);\n    if (cachedAnswer != null) {\n      return cachedAnswer;\n    }\n    const answer =\n        Hct.from(this.hue(scheme), this.chroma(scheme), this.getTone(scheme));\n    if (this.hctCache.size > 4) {\n      this.hctCache.clear();\n    }\n    this.hctCache.set(scheme, answer);\n    return answer;\n  }\n\n  /**\n   * Return a tone, T in the HCT color space, that this DynamicColor is under\n   * the conditions in scheme.\n   *\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   */\n  getTone(scheme: DynamicScheme): number {\n    let answer = this.tone(scheme);\n    const decreasingContrast = scheme.contrastLevel < 0.0;\n    if (scheme.contrastLevel !== 0.0) {\n      const startTone = this.tone(scheme);\n      const endTone = decreasingContrast ? this.toneMinContrast(scheme) :\n                                           this.toneMaxContrast(scheme);\n      const delta = (endTone - startTone) * Math.abs(scheme.contrastLevel);\n      answer = delta + startTone;\n    }\n\n    const bg = this.background?.(scheme);\n    let standardRatio: number|null;\n    let minRatio: number|null;\n    let maxRatio: number|null;\n    if (bg != null) {\n      const bgHasBg = bg?.background?.(scheme) != null;\n      standardRatio = Contrast.ratioOfTones(this.tone(scheme), bg.tone(scheme));\n      if (decreasingContrast) {\n        const minContrastRatio = Contrast.ratioOfTones(\n            this.toneMinContrast(scheme), bg.toneMinContrast(scheme));\n        minRatio = bgHasBg ? minContrastRatio : null;\n        maxRatio = standardRatio;\n      } else {\n        const maxContrastRatio = Contrast.ratioOfTones(\n            this.toneMaxContrast(scheme), bg.toneMaxContrast(scheme));\n        minRatio = bgHasBg ? Math.min(maxContrastRatio, standardRatio) : null;\n        maxRatio = bgHasBg ? Math.max(maxContrastRatio, standardRatio) : null;\n      }\n    }\n\n    answer = DynamicColor.calculateDynamicTone({\n      scheme,\n      toneStandard: this.tone,\n      toneToJudge: (c) => c.getTone(scheme),\n      desiredTone: (s, t) => answer,\n      background: bg != null ? (s) => bg : undefined,\n      toneDeltaConstraint: this.toneDeltaConstraint,\n      minRatio: (s) => minRatio ?? 1.0,\n      maxRatio: (s) => maxRatio ?? 21.0,\n    });\n\n    return answer;\n  }\n\n  /**\n   * Enforce a ToneDeltaConstraint between two DynamicColors.\n   *\n   * @param tone The desired tone of the color.\n   * @param toneStandard The tone of the color at standard contrast.\n   * @param scheme Defines the conditions of the user interface, for example,\n   * whether or not it is dark mode or light mode, and what the desired\n   * contrast level is.\n   * @param constraintProvider Given a DynamicScheme, return a\n   * ToneDeltaConstraint or null.\n   * @param toneToDistanceFrom Given a DynamicColor, return a tone that the\n   * ToneDeltaConstraint should enforce a delta from.\n   */\n  static ensureToneDelta(\n      tone: number, toneStandard: number, scheme: DynamicScheme,\n      constraintProvider?: (scheme: DynamicScheme) => ToneDeltaConstraint |\n          null,\n      toneToDistanceFrom?: (color: DynamicColor) => number): number {\n    const constraint = constraintProvider ? constraintProvider(scheme) : null;\n    if (constraint == null || toneToDistanceFrom == null) {\n      return tone;\n    }\n\n    const requiredDelta = constraint.delta;\n    const keepAwayTone = toneToDistanceFrom(constraint.keepAway);\n    const delta = Math.abs(tone - keepAwayTone);\n    if (delta > requiredDelta) {\n      return tone;\n    }\n    switch (constraint.keepAwayPolarity) {\n      case 'darker':\n        return math.clampDouble(0.0, 100.0, keepAwayTone + requiredDelta);\n      case 'lighter':\n        return math.clampDouble(0.0, 100.0, keepAwayTone - requiredDelta);\n\n      case 'no-preference':\n        const keepAwayToneStandard = constraint.keepAway.tone(scheme);\n        const preferLighten = toneStandard > keepAwayToneStandard;\n        const alterAmount = Math.abs(delta - requiredDelta);\n        const lighten =\n            preferLighten ? tone + alterAmount <= 100.0 : tone < alterAmount;\n        return lighten ? tone + alterAmount : tone - alterAmount;\n\n      default:\n        return tone;\n    }\n  }\n\n  /**\n   * Given a background tone, find a foreground tone, while ensuring they reach\n   * a contrast ratio that is as close to [ratio] as possible.\n   *\n   * @param bgTone Tone in HCT. Range is 0 to 100, undefined behavior when it\n   *     falls outside that range.\n   * @param ratio The contrast ratio desired between bgTone and the return\n   *     value.\n   */\n  static foregroundTone(bgTone: number, ratio: number): number {\n    const lighterTone = Contrast.lighterUnsafe(bgTone, ratio);\n    const darkerTone = Contrast.darkerUnsafe(bgTone, ratio);\n    const lighterRatio = Contrast.ratioOfTones(lighterTone, bgTone);\n    const darkerRatio = Contrast.ratioOfTones(darkerTone, bgTone);\n    const preferLighter = DynamicColor.tonePrefersLightForeground(bgTone);\n\n    if (preferLighter) {\n      // This handles an edge case where the initial contrast ratio is high\n      // (ex. 13.0), and the ratio passed to the function is that high\n      // ratio, and both the lighter and darker ratio fails to pass that\n      // ratio.\n      //\n      // This was observed with Tonal Spot's On Primary Container turning\n      // black momentarily between high and max contrast in light mode. PC's\n      // standard tone was T90, OPC's was T10, it was light mode, and the\n      // contrast value was 0.6568521221032331.\n      const negligibleDifference = Math.abs(lighterRatio - darkerRatio) < 0.1 &&\n          lighterRatio < ratio && darkerRatio < ratio;\n      return lighterRatio >= ratio || lighterRatio >= darkerRatio ||\n              negligibleDifference ?\n          lighterTone :\n          darkerTone;\n    } else {\n      return darkerRatio >= ratio || darkerRatio >= lighterRatio ? darkerTone :\n                                                                   lighterTone;\n    }\n  }\n\n  /**\n   * Core method for calculating a tone for under dynamic contrast.\n   *\n   * It calculates tone while enforcing these properties:\n   * #1. Desired contrast ratio is reached.\n   * #2. Darken to enable light foregrounds on midtones.\n   * #3. Enforce tone delta constraint, if needed.\n   */\n  static calculateDynamicTone(args: CalculateDynamicToneOptions): number {\n    const background = args.background;\n    const scheme = args.scheme;\n    const toneStandard = args.toneStandard;\n    const toneToJudge = args.toneToJudge;\n    const desiredTone = args.desiredTone;\n    const minRatio = args.minRatio;\n    const maxRatio = args.maxRatio;\n    const toneDeltaConstraint = args.toneDeltaConstraint;\n\n    // Start with the tone with no adjustment for contrast.\n    // If there is no background, don't perform any adjustment, return\n    // immediately.\n    const toneStd = toneStandard(scheme);\n    let answer = toneStd;\n    const bgDynamic = background?.(scheme);\n    if (bgDynamic == null) {\n      return answer;\n    }\n    const bgToneStd = bgDynamic.tone(scheme);\n    const stdRatio = Contrast.ratioOfTones(toneStd, bgToneStd);\n\n    // If there is a background, determine its tone.\n    // Then, calculate tone that ensures the desired contrast ratio is met.\n    const bgTone = toneToJudge(bgDynamic);\n    const myDesiredTone = desiredTone(stdRatio, bgTone);\n    const currentRatio = Contrast.ratioOfTones(bgTone, myDesiredTone);\n    const desiredRatio = math.clampDouble(\n        minRatio?.(stdRatio) ?? 1.0, maxRatio?.(stdRatio) ?? 21.0,\n        currentRatio);\n    if (desiredRatio === currentRatio) {\n      answer = myDesiredTone;\n    } else {\n      answer = DynamicColor.foregroundTone(bgTone, desiredRatio);\n    }\n\n    // If the background has no background, adjust calculated tone to ensure it\n    // is dark enough to have a light foreground.\n    if (bgDynamic.background?.(scheme) == null) {\n      answer = DynamicColor.enableLightForeground(answer);\n    }\n\n    // If there is a tone delta constraint, enforce it.\n    answer = DynamicColor.ensureToneDelta(\n        answer, toneStd, scheme, toneDeltaConstraint, (c) => toneToJudge(c));\n\n    return answer;\n  }\n\n  /**\n   * Default algorithm for calculating the tone of a color at maximum contrast.\n   *\n   * If the color's background has a background, reach contrast 7.0.\n   * If it doesn't, maintain the original contrast ratio.\n   */\n  static toneMaxContrastDefault(args: ToneContrastOptions): number {\n    return DynamicColor.calculateDynamicTone({\n      scheme: args.scheme,\n      toneStandard: args.tone,\n      toneToJudge: (c: DynamicColor) => c.toneMaxContrast(args.scheme),\n      desiredTone: (stdRatio: number, bgTone: number) => {\n        const backgroundHasBackground =\n            args.background?.(args.scheme)?.background?.(args.scheme) != null;\n        if (backgroundHasBackground) {\n          return DynamicColor.foregroundTone(bgTone, 7.0);\n        } else {\n          return DynamicColor.foregroundTone(bgTone, Math.max(7.0, stdRatio));\n        }\n      },\n      background: args.background,\n      toneDeltaConstraint: args.toneDeltaConstraint,\n    });\n  }\n\n  /**\n   * Default algorithm for calculating the tone of a color at minimum contrast.\n   *\n   * If the original contrast ratio was >= 7.0, reach contrast 4.5.\n   * If the original contrast ratio was >= 3.0, reach contrast 3.0.\n   * If the original contrast ratio was < 3.0, reach that ratio.\n   */\n  static toneMinContrastDefault(args: ToneContrastOptions): number {\n    return DynamicColor.calculateDynamicTone({\n      scheme: args.scheme,\n      toneStandard: args.tone,\n      toneToJudge: (c: DynamicColor) => c.toneMinContrast(args.scheme),\n      desiredTone: (stdRatio: number, bgTone: number) => {\n        let answer: number = args.tone(args.scheme);\n        if (stdRatio >= 7.0) {\n          answer = DynamicColor.foregroundTone(bgTone, 4.5);\n        } else if (stdRatio >= 3.0) {\n          answer = DynamicColor.foregroundTone(bgTone, 3.0);\n        } else {\n          const backgroundHasBackground =\n              args.background?.(args.scheme)?.background?.(args.scheme) != null;\n          if (backgroundHasBackground) {\n            answer = DynamicColor.foregroundTone(bgTone, stdRatio);\n          }\n        }\n        return answer;\n      },\n      background: args.background,\n      toneDeltaConstraint: args.toneDeltaConstraint,\n      minRatio: (standardRatio: number) => 1.0,\n      maxRatio: (standardRatio: number) => standardRatio,\n    });\n  }\n\n  /**\n   * Returns whether [tone] is <= 60.\n   *\n   * People prefer white foregrounds on ~T60-70. Observed over time, and also\n   * by Andrew Somers during research for APCA.\n   *\n   * T60 used as to create the smallest discontinuity possible when skipping\n   * down to T49 in order to ensure light foregrounds.\n   */\n  static tonePrefersLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 60.0;\n  }\n\n  /**\n   * Returns whether [tone] can reach a contrast ratio of 4.5 with a lighter\n   * color.\n   */\n  static toneAllowsLightForeground(tone: number): boolean {\n    return Math.round(tone) <= 49.0;\n  }\n\n  /**\n   * Adjust a tone such that white has 4.5 contrast, if the tone is\n   * reasonably close to supporting it.\n   */\n  static enableLightForeground(tone: number): number {\n    if (DynamicColor.tonePrefersLightForeground(tone) &&\n        !DynamicColor.toneAllowsLightForeground(tone)) {\n      return 49.0;\n    }\n    return tone;\n  }\n}\n"]}